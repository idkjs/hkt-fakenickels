// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

var Common = {};

function Newtype1(T) {
  return T;
}

function bind(f, a) {
  if (a !== undefined) {
    return Caml_option.some(Curry._1(f, Caml_option.valFromOption(a)));
  }
  
}

var OptionFunctor = {
  bind: bind
};

function bind$1(f, a) {
  if (a) {
    return List.map(f, a);
  } else {
    return /* [] */0;
  }
}

var ListFunctor = {
  bind: bind$1
};

function map(Functor, f, hfa) {
  return Curry._2(Functor.bind, Curry.__1(f), hfa);
}

var user = "Henlou";

var myNumberBois = {
  hd: 1,
  tl: {
    hd: 2,
    tl: {
      hd: 3,
      tl: {
        hd: 5,
        tl: /* [] */0
      }
    }
  }
};

map(OptionFunctor, (function (a) {
        return "mr. " + a;
      }), user);

map(ListFunctor, (function (a) {
        return a + 12 | 0;
      }), myNumberBois);

function get(state, field) {
  if (field) {
    return state.age;
  } else {
    return state.email;
  }
}

function set(state, field, value) {
  if (field) {
    return {
            email: state.email,
            age: value
          };
  } else {
    return {
            email: value,
            age: state.age
          };
  }
}

var StateLenses = {
  get: get,
  set: set
};

function LensesHKT(T) {
  return T;
}

var StateLensesHKT = {
  get: get,
  set: set
};

var form = {
  email: "fakenickels@gov.br",
  age: 12
};

function validateField(Lenses, validator, state) {
  switch (validator.TAG | 0) {
    case /* Email */0 :
        if (Curry._2(Lenses.get, state, validator._0).length > 10) {
          return {
                  TAG: /* Ok */0,
                  _0: undefined
                };
        } else {
          return {
                  TAG: /* Error */1,
                  _0: "Invalid email"
                };
        }
    case /* IntMax */1 :
        var max = validator._0;
        var value = Curry._2(Lenses.get, state, validator._1);
        if (value < max) {
          return {
                  TAG: /* Ok */0,
                  _0: undefined
                };
        } else {
          return {
                  TAG: /* Error */1,
                  _0: String(value) + (" is greater than " + String(max))
                };
        }
    case /* IntMin */2 :
        var min = validator._0;
        var value$1 = Curry._2(Lenses.get, state, validator._1);
        if (value$1 > min) {
          return {
                  TAG: /* Ok */0,
                  _0: undefined
                };
        } else {
          return {
                  TAG: /* Error */1,
                  _0: String(value$1) + (" is less than " + String(min))
                };
        }
    
  }
}

validateField(StateLensesHKT, {
      TAG: /* IntMax */1,
      _0: 10,
      _1: /* Age */1
    }, form);

validateField(StateLensesHKT, {
      TAG: /* IntMax */1,
      _0: 18,
      _1: /* Age */1
    }, form);

function intMax(Lenses, max, field) {
  return {
          TAG: /* IntMax */1,
          _0: max,
          _1: field
        };
}

intMax(StateLensesHKT, 18, /* Age */1);

function validate(Lenses, schema, state) {
  return List.map((function (validator) {
                return validateField(Lenses, validator, state);
              }), schema);
}

var schema_0 = {
  TAG: /* IntMax */1,
  _0: 10,
  _1: /* Age */1
};

var schema_1 = {
  hd: {
    TAG: /* Email */0,
    _0: /* Email */0
  },
  tl: /* [] */0
};

var schema = {
  hd: schema_0,
  tl: schema_1
};

validate(StateLensesHKT, schema, form);

exports.Common = Common;
exports.Newtype1 = Newtype1;
exports.OptionFunctor = OptionFunctor;
exports.ListFunctor = ListFunctor;
exports.map = map;
exports.user = user;
exports.myNumberBois = myNumberBois;
exports.StateLenses = StateLenses;
exports.LensesHKT = LensesHKT;
exports.StateLensesHKT = StateLensesHKT;
exports.form = form;
exports.validateField = validateField;
exports.intMax = intMax;
exports.validate = validate;
exports.schema = schema;
/*  Not a pure module */
